import React, { useState } from "react";
import {
  Box,
  Container,
  Typography,
  Grid,
  Card,
  CardContent,
  Radio,
  RadioGroup,
  FormControlLabel,
  TextField,
  Button,
  InputAdornment,
  Divider,
} from "@mui/material";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import FlightTakeoffIcon from "@mui/icons-material/FlightTakeoff";
import FlightLandIcon from "@mui/icons-material/FlightLand";
import PersonIcon from "@mui/icons-material/Person";
import ChildCareIcon from "@mui/icons-material/ChildCare";
import BabyChangingStationIcon from "@mui/icons-material/BabyChangingStation";

const TimVeMayBay = () => {
  const [tripType, setTripType] = useState("oneWay");
  const [departureDate, setDepartureDate] = useState(null);
  const [returnDate, setReturnDate] = useState(null);
  const [passengers, setPassengers] = useState({
    adults: 1,
    children: 0,
    infants: 0,
  });

  const handlePassengerChange = (type, value) => {
    setPassengers((prev) => ({
      ...prev,
      [type]: Math.max(0, parseInt(value) || 0),
    }));
  };

  return (
    <Box sx={{ minHeight: "100vh", bgcolor: "grey.50", py: 4 }}>
      <Container>
        {/* Hero Section */}
        <Box sx={{ mb: 6, textAlign: "center" }}>
          <Typography variant="h3" component="h1" gutterBottom>
            M·ªü c√°nh c·ª≠a kh√°m ph√° c√πng üêíD Luffy
          </Typography>
          <Typography variant="h5" color="text.secondary">
            üêíD Luffy - ƒê·∫∑t ch√¢n l√™n ƒë·ªânh m√¢y v·ªõi m·ªôt b∆∞·ªõc nh·∫£y
          </Typography>
        </Box>

        {/* Search Form */}
        <Card sx={{ mb: 6 }}>
          <CardContent sx={{ p: 4 }}>
            <Grid container spacing={3}>
              {/* Trip Type Selection */}
              <Grid item xs={12}>
                <RadioGroup
                  row
                  value={tripType}
                  onChange={(e) => setTripType(e.target.value)}
                >
                  <FormControlLabel
                    value="oneWay"
                    control={<Radio />}
                    label="M·ªôt chi·ªÅu"
                  />
                  <FormControlLabel
                    value="roundTrip"
                    control={<Radio />}
                    label="Kh·ª© h·ªìi"
                  />
                  <FormControlLabel
                    value="multiCity"
                    control={<Radio />}
                    label="V√© r·∫ª nh·∫•t th√°ng"
                  />
                </RadioGroup>
              </Grid>

              {/* Departure & Arrival */}
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="ƒêi·ªÉm ƒëi"
                  variant="outlined"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <FlightTakeoffIcon />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="ƒêi·ªÉm ƒë·∫øn"
                  variant="outlined"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <FlightLandIcon />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              {/* Dates */}
              <Grid item xs={12} md={6}>
                <LocalizationProvider dateAdapter={AdapterDayjs}>
                  <DatePicker
                    label="Ng√†y ƒëi"
                    value={departureDate}
                    onChange={(newValue) => setDepartureDate(newValue)}
                    sx={{ width: "100%" }}
                  />
                </LocalizationProvider>
              </Grid>
              {tripType === "roundTrip" && (
                <Grid item xs={12} md={6}>
                  <LocalizationProvider dateAdapter={AdapterDayjs}>
                    <DatePicker
                      label="Ng√†y v·ªÅ"
                      value={returnDate}
                      onChange={(newValue) => setReturnDate(newValue)}
                      sx={{ width: "100%" }}
                    />
                  </LocalizationProvider>
                </Grid>
              )}

              {/* Passengers */}
              <Grid item xs={12} md={4}>
                <TextField
                  fullWidth
                  label="Ng∆∞·ªùi l·ªõn"
                  type="number"
                  value={passengers.adults}
                  onChange={(e) =>
                    handlePassengerChange("adults", e.target.value)
                  }
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <PersonIcon />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12} md={4}>
                <TextField
                  fullWidth
                  label="Tr·∫ª em"
                  type="number"
                  value={passengers.children}
                  onChange={(e) =>
                    handlePassengerChange("children", e.target.value)
                  }
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <ChildCareIcon />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12} md={4}>
                <TextField
                  fullWidth
                  label="Em b√©"
                  type="number"
                  value={passengers.infants}
                  onChange={(e) =>
                    handlePassengerChange("infants", e.target.value)
                  }
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <BabyChangingStationIcon />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              {/* Search Button */}
              <Grid item xs={12}>
                <Button
                  variant="contained"
                  size="large"
                  fullWidth
                  sx={{ mt: 2 }}
                >
                  T√¨m chuy·∫øn bay
                </Button>
              </Grid>
            </Grid>
          </CardContent>
        </Card>

        {/* Reviews Section */}
        <Box sx={{ mb: 6 }}>
          <Typography variant="h4" align="center" gutterBottom>
            ƒê√°nh gi√° t·ª´ nh·ªØng ng∆∞·ªùi ƒë√£ tr·∫£i nghi·ªám
          </Typography>
          <Typography
            variant="subtitle1"
            align="center"
            color="text.secondary"
            sx={{ mb: 4 }}
          >
            Kh√°ch h√†ng chia s·∫ª v·ªÅ nh·ªØng k·ª∑ ni·ªám tuy·ªát v·ªùi tr√™n chuy·∫øn du l·ªãch
            v·ªõi ch√∫ng t√¥i.
          </Typography>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Card>
                <CardContent>
                  <Typography variant="body1" sx={{ mb: 2 }}>
                    "Chuy·∫øn bay c·ªßa ch·ªã v√† gia ƒë√¨nh ƒëi ch∆°i r·∫•t thu·∫≠n l·ª£i em ·∫°.
                    May l√† ch·ªã ƒë·∫∑t v√© b√™n em. B√™n em t∆∞ v·∫•n ch·ªçn chuy·∫øn cho ch·ªã
                    xong l·∫°i check in online cho ch·ªã n·ªØa n√™n c·∫£ nh√† ƒë∆∞·ª£c ng·ªìi
                    g·∫ßn nhau. B·∫°n l·ªõn nh√† ch·ªã ƒë∆∞·ª£c ng·ªìi c·∫°nh c·ª≠a s·ªï nh√¨n ng·∫Øm
                    l√∫c c·∫•t c√°nh th√≠ch l·∫Øm! Nh√† ch·ªã c≈©ng th∆∞·ªùng xuy√™n ƒëi ch∆°i
                    n√™n ch·ªã s·∫Ω ƒë·∫∑t v√© b√™n em nhi·ªÅu nhi·ªÅu!"
                  </Typography>
                  <Typography variant="subtitle2" color="text.secondary">
                    - Ch·ªã L√™ Th·ªßy
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        </Box>

        {/* Partners Section */}
        <Box>
          <Typography variant="h4" align="center" gutterBottom>
            ƒê·ªëi t√°c c√πng c√°c h√£ng m√°y bay l·ªõn
          </Typography>
          <Typography
            variant="subtitle1"
            align="center"
            color="text.secondary"
            sx={{ mb: 4 }}
          >
            ƒê·ªëi t√°c h√†ng ƒë·∫ßu v·ªõi c√°c h√£ng m√°y bay l·ªõn: ∆Øu ƒë√£i ƒë·ªôc quy·ªÅn d√†nh
            ri√™ng cho b·∫°n
          </Typography>
          <Grid container spacing={2} justifyContent="center">
            {/* Placeholder for airline logos */}
            {[1, 2, 3, 4, 5].map((item) => (
              <Grid item key={item}>
                <Box
                  component="img"
                  src={`/images/airline-${item}.png`}
                  alt={`Airline ${item}`}
                  sx={{ height: 60, filter: "grayscale(100%)", opacity: 0.7 }}
                />
              </Grid>
            ))}
          </Grid>
        </Box>
      </Container>
    </Box>
  );
};

export default TimVeMayBay;
